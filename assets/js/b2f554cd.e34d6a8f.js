"use strict";(self.webpackChunkpractica_docs=self.webpackChunkpractica_docs||[]).push([[477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"monorepo-backend","metadata":{"permalink":"/blog/monorepo-backend","editUrl":"https://github.com/practicajs/practica/tree/main/docs/blog/which-monorepo/index.md","source":"@site/blog/which-monorepo/index.md","title":"Which Monorepo is right for a Node.js BACKEND\xa0now?","description":"Making our decisions transparent and collaborative is at the heart of Practica. In this post, we\'d like to share our considerations in choosing our monorepo tooling","date":"2022-08-07T09:40:51.000Z","formattedDate":"August 7, 2022","tags":[{"label":"monorepo","permalink":"/blog/tags/monorepo"},{"label":"decisions","permalink":"/blog/tags/decisions"}],"readingTime":1.355,"truncated":false,"authors":[{"name":"Yoni Goldberg","title":"Practica.js core maintainer","url":"https://github.com/goldbergyoni","imageURL":"https://github.com/goldbergyoni.png","key":"goldbergyoni"},{"name":"Michael Salomon","title":"Practica.js core maintainer","url":"https://github.com/mikicho","imageURL":"https://avatars.githubusercontent.com/u/11459632?v=4","key":"michaelsalomon"}],"frontMatter":{"slug":"monorepo-backend","title":"Which Monorepo is right for a Node.js BACKEND\xa0now?","authors":["goldbergyoni","michaelsalomon"],"tags":["monorepo","decisions"]},"nextItem":{"title":"Popular Node.js tools and patterns that you should re-consider","permalink":"/blog/pattern-to-reconsider"}},"content":"Making our decisions transparent and collaborative is at the heart of Practica. In this post, we\'d like to share our considerations in choosing our monorepo tooling\\n\\n![Monorepos](/img/monorepo-theme-1.png)\\n\\n## What are we looking\xa0at\\n\\nThe Monorepo market is hot like fire. Weirdly, now when the demand for Monoreps is exploding, one of the leading libraries\u200a-\u200aLerna- has just retired. When looking closely, it might not be just a coincidence\u200a-\u200aWith so many disruptive and shiny features brought on by new vendors, Lerna failed to keep up with the pace and stay relevant. This bloom of new tooling gets many confused\u200a-\u200aWhat is the right choice for my next project? What should I look at when choosing a Monorepo tool? This post is all about curating this information overload, covering the new tooling, emphasizing what is important, and finally share some recommendations. If you are here for tools and features, you\'re in the right place, although you might find yourself on a soul-searching journey to what is your desired development workflow.\\n\\nThis post is concerned with backend-only and Node.js. It also scoped to typical business solutions. If you\'re Google/FB developer who is faced with 8,000 packages\u200a-\u200asorry, you need special gear. Consequently, monster Monorepo tooling like Bazel is left-out. We will cover here some of the most popular Monorepo tools including Turborepo, Nx, PNPM, Yarn/npm workspace, and Lerna (although it\'s not actually maintained anymore\u200a-\u200ait\'s a good baseline for comparison).\\n\\nLet\'s start? When human beings use the term Monorepo, they typically refer to one or more of the following 4 layers below. Each one of them can bring value to your project, each has different consequences, tooling, and features:"},{"id":"pattern-to-reconsider","metadata":{"permalink":"/blog/pattern-to-reconsider","editUrl":"https://github.com/practicajs/practica/tree/main/docs/blog/pattern-to-reconsider/index.md","source":"@site/blog/pattern-to-reconsider/index.md","title":"Popular Node.js tools and patterns that you should re-consider","description":"Node.js is getting aged, good but also bad (quote from habit). To live longer, Node.js should change its skin, like the phoenix bird and re-consider its patterns","date":"2022-08-02T10:00:00.000Z","formattedDate":"August 2, 2022","tags":[{"label":"node.js","permalink":"/blog/tags/node-js"},{"label":"express","permalink":"/blog/tags/express"},{"label":"nestjs","permalink":"/blog/tags/nestjs"},{"label":"fastify","permalink":"/blog/tags/fastify"},{"label":"passport","permalink":"/blog/tags/passport"},{"label":"dotenv","permalink":"/blog/tags/dotenv"}],"readingTime":9.785,"truncated":false,"authors":[{"name":"Yoni Goldberg","title":"Practica.js core maintainer","url":"https://github.com/goldbergyoni","imageURL":"https://github.com/goldbergyoni.png","key":"goldbergyoni"}],"frontMatter":{"slug":"pattern-to-reconsider","date":"2022-08-02T10:00","hide_table_of_contents":true,"title":"Popular Node.js tools and patterns that you should re-consider","authors":["goldbergyoni"],"tags":["node.js","express","nestjs","fastify","passport","dotenv"]},"prevItem":{"title":"Which Monorepo is right for a Node.js BACKEND\xa0now?","permalink":"/blog/monorepo-backend"}},"content":"Node.js is getting aged, good but also bad (quote from habit). To live longer, Node.js should change its skin, like the phoenix bird and re-consider its patterns\\n\\n\\"Mastery is created by habits. However, sometimes when we\u2019re on auto-pilot performing habits, we tend to slip up... Just being we are gaining experience through performing the habits does not mean that we are improving. We actually go backwards on the improvement scale with most habits that turn into auto-pilot\\". James suggested that we should alway gauge our habits and occasionally ask - What went well this year?\\n\\nThe difference between a platform that is perceived as obsolete (Ruby?) vs a platform that lives for a long time, is the amount of changes and paradigm changes that the community is willing to consider. Our loyalty is to innovation, an everlast concept unlike Ruby\\n\\nAm I sure that these patterns are wrong? No, I\'m not. The important drill here is keep discussing things and not pasting them because we\'re used to\\n\\n![Monorepos](/img/monorepo-theme-1.png)\\n\\n## 1. Dotenv as your configuration source\\n\\n**\ud83d\udc81\u200d\u2642\ufe0f What is it about:** A super popular technique in which the app configurable values (e.g., DB user name) are stored in a simple text file. Then, when the app loads, the dotenv library sets all the text file values as environment variables so the code can read those\\n\\n\\n```javascript\\n// .env file\\nUSER_SERVICE_URL=https://users.myorg.com\\n\\n//start.js\\nrequire(\'dotenv\').config();\\n\\n//blog-post-service.js\\nrepository.savePost(post);\\n//update the user number of posts, read the users service URL from an environment variable\\nawait axios.put(`${process.env.USER_SERVICE_URL}/api/user/${post.userId}/incrementPosts`)\\n\\n```\\n\\n**\ud83d\udcca How popular:** 21,806,137 downloads/week!\\n\\n**\ud83e\udd14 Why it might be wrong:** Dotenv is so easy and intuitive to start with so one easily overlook fundamental features: It\'s hard to infer the configuration schema and realize the reason and typing of each key. Consequently, there is no built-in way to fail fast when a mandatory key is missing (a flow might fail after already started and doing side-effects). In the example above, the blog post will be saved to DB and only then too late the code will realize that a mandatory key is missing leaving the app hanging in an invalid state. On top of this, in the precense of many keys, it\'s not possible to organize them hierarchically. If not enough, it encourages developers to commit this .env file which might contain production values - this happens because there is no clear way to define development defaults (teams usually work around this by committing .env.example file and then asking whomever pulls code to rename this file manually. If they remember of course)\\n\\n\\n**\u2600\ufe0f Better alternative:** Some configuration libraries provide out of the box solution to all of these needs, mostly a clear schema and the possibility to validate early and fail if needed. See comparison of options here. One of the better alternatives is \'convict\', here is the same example, hopefully better:\\n\\n```javascript\\n// config.js\\nexport default {\\n  userService: {\\n    url: {\\n        // Hierarchical, documented and strongly typed \ud83d\udc47\\n        doc: \'The URL of the user management service including a trailing slash\',\\n        format: \'url\',\\n        default: \'http://localhost:4001\',\\n        nullable: false,\\n        env: \'USER_SERVICE_URL\',\\n        }\\n  },\\n  //more keys here\\n}\\n\\n//start.js\\nimport convict from \'convict\';\\nimport configSchema from \'config\';\\nconvict(configSchema);\\n// Fail fast!\\nconvictConfigurationProvider.validate();\\n\\n//blog-post.js\\nrepository.savePost(post);\\n// Will never arrive here if the URL is not set\\nawait axios.put(`${convict.get(userService.url)}/api/user/${post.userId}/incrementPosts`)\\n```\\n\\n## 2. Calling a \'fat\' service from the API controller\\n\\n**\ud83d\udc81\u200d\u2642\ufe0f What is it about:** Very often, controllers are thin (great), they delegate the logic to a service. Service is hundred if not thousands line of code\\n\\n```javascript\\n// dirty user service\\n```\\n\\n**\ud83d\udcca How popular:** No numbers here but I could confidently say that in *most* of the app that I see, this is the case\\n\\n**\ud83e\udd14 Why it might be wrong:** The reader who tries to understand the high-level logic flow, or focus on specific functionality, must mess with huge file/module first\\n\\n**\u2600\ufe0f Better alternative:** Use \'Use case\', a unique type of object that is responsible to summarize in high-level the flow of each feature/interaction. This way, the reader can understand the major pieces *easily*, and can delve into the relevant part without skimming through hundred of lines. Each functionality that the use case invoke, like some calculation, utility, approach to external collaborator is a service. This way, the services are also kept small. code example\\n\\nIdeas: Encourage breaking down to small services, transactions,     \\n\\n## 3. Nest.js: Wire *everything* with dependency injection\\n\\n\\n**\ud83d\udc81\u200d\u2642\ufe0f What is it about:** You\'re decorating *every* class *by default* as injectable. Say A, B, C, although internal details - no unit tests, it\'s still decorated. DI becomes your coding style, just like you\'re using classes\\n\\n```javascript\\nrequire(\'dotenv\').config();\\nconsole.log(process.env.DB_USER_NAME);\\n```\\n\\n**\ud83d\udcca How popular:** No numbers here but I could confidently say that in *all* of the Nest.js app that I see, this is the case\\n\\n**\ud83e\udd14 Why it might be wrong:** DI is not a coding style rather engieering measure that should be used contextually to solve problems. It also has a price that you should consider if worth paying - encapsulation, confusion, slower (Nest.js serverless issue). If you don\'t need it for a specific class/case, why pay this price? DI is sometimes useful and the right weapon to pull - But it\'s not always\\n\\n**\u2600\ufe0f Better alternative:** Leanify your engineering approach - avoid using any tool unless serves real-world need immediately. Need to dynamically factor some provider? Use if/else with plain simple JS code, need to mock something? monkey patching is also an option (better clutter test code tha production code, right?). Really have a reason to decouple the factoring of a dependency from the dependant? Use DI!\\n\\nIdeas: The complexity tree, good articles, \\n\\n## 4. Passport.js for token authorization\\n\\n\\n**\ud83d\udc81\u200d\u2642\ufe0f What is it about:** Typical need to validate JWT token, whether you\'re the issuer or an external issue like Google/Facebook\\n\\n```javascript\\nrequire(\'dotenv\').config();\\nconsole.log(process.env.DB_USER_NAME);\\n```\\n\\n**\ud83d\udcca How popular:** 1,389,720 weekly downloads\\n\\n**\ud83e\udd14 Why it might be wrong:** It brings high abstractions that demand learning new concepts, when basic token authentication demands no more than few lines of code. Passport shines when there is a need to support many providers - int this case the abstraction worth its price\\n\\n**\u2600\ufe0f Better alternative:** Code it yourself or with the provider library\\n\\nIdeas: \\n\\n## 5. Supertest for integration/API testing\\n\\n**\ud83d\udc81\u200d\u2642\ufe0f What is it about:** When testing against an API, supertest provides a sweat syntax that can both detect the webserver address, make HTTP call and also assert on the response. A three in one package. \\n\\n```javascript\\nrequire(\'dotenv\').config();\\nconsole.log(process.env.DB_USER_NAME);\\n```\\n\\n**\ud83d\udcca How popular:** 2,717,744 weekly downloads\\n\\n**\ud83e\udd14 Why it might be wrong:** You already have your assertion library, why code some tests using another... which actually was suppoed to be HTTP client. On top of this, supertest encourage coupling to express, not API (won\'t work on remote env, couples to implementation). Last but not least, there are more popular HTTP clients, better maintained and features that might be relevant for testing\\n\\n**\u2600\ufe0f Better alternative:** A popular and standard HTTP client library like Node.js Fetch or Axios\\n\\ncode example\\n\\n\\n## 6. Fastify decorate for non request/web utilities\\n\\n**\ud83d\udc81\u200d\u2642\ufe0f What is it about:** Fastify introduces great patterns, preserves the simplicity of express while bringing more batteries. One thing that got me wondering is the \'decorate\' feature which allows placing common utilities/services inside a widely accessible container object:\\n\\n```javascript\\nlogger example\\n```\\n\\nIt should be noted that \'decorate\' allows scoping the access per plugin/area of the system\\n\\n**\ud83d\udcca How popular:** Fastify has 696,122 weekly download and growing rapidly. The decorator concept is part of the framework\'s core\\n\\n**\ud83e\udd14 Why it might be wrong:** Some services and utilities serve cross-cutting-concern needs like logger and should be accessible from other layers like domain and DAL. The fastify object is not accessible to this layer, you probably don\'t want to, req can come from MQ\\n\\n**\u2600\ufe0f Better alternative:** A good old Node.js module is a standard way to expose functionality. It should be noted that Node.js module won\'t provide scoped access/configuration per specific routes\\n\\nCode example of logger\\n\\n## 7. Logging from a catch clause\\n\\n**\ud83d\udc81\u200d\u2642\ufe0f What is it about:** You catch an error somewhere deep in the code (not on the route level), then call logger.error to make this error observable\\n\\n```javascript\\ntry{\\n    axios.post(\'https://thatService.io/api/users);\\n}\\ncatch(error){\\n    logger.error(error, this, {operation: addNewOrder});\\n}\\n```\\n\\n**\ud83d\udcca How popular:** Hard to put my hands on numbers but it\'s quite popular, right?\\n\\n**\ud83e\udd14 Why it might be wrong:** Error should get handled/logged in a central location. Often do I see various catch clauses that handle the error in a different way with different tags for example. This behaviour is also likely to change, consider incrementing a metric on every error, and keeping this DRY is valuable here. Other than that, there should be a motivation to put a catch clause instead of letting the error bubble down to the route/entry-point. It\'s useful if we wish to change the flow based on the error or enrich the error with more information - this is not the case here\\n\\n**\u2600\ufe0f Better alternative:** Avoid catch, let the error bubble down the layer, unless the error changes the flow or there is value in enriching the error with more context. When deciding to use catch, delegate the handling/logging to your centralized handler\\n\\nCode example of catch and handler\\n\\n## 8. Package.lock OR Reading environment variables in all the code layers\\n\\nThe Monorepo market is hot like fire. Weirdly, now when the demand for Monoreps is exploding, one of the leading libraries\u200a-\u200aLerna- has just retired. When looking closely, it might not be just a coincidence\u200a-\u200aWith so many disruptive and shiny features brought on by new vendors, Lerna \\n\\n## 9. Use Morgan logger for express web requests\\n\\n**\ud83d\udc81\u200d\u2642\ufe0f What is it about:** In many express, found the following line merely logs the request info\\n\\n```javascript\\ntry{\\n    axios.post(\'https://thatService.io/api/users);\\n}\\ncatch(error){\\n    logger.error(error, this, {operation: addNewOrder});\\n}\\n```\\n\\n**\ud83d\udcca How popular:** 2,901,574 downloads/week\\n\\n**\ud83e\udd14 Why it might be wrong:** You already have your main logger, right? Is it Pino? Winston? something else? great. Why deal with and configure yet another logger? \\n\\n**\u2600\ufe0f Better alternative:** Use you main logger in a middleware and log the desired request/response properties\\n\\nCode example of logging with Pino\\n\\n## 10. having conditional code based on NODE_ENV value\\n\\n**\ud83d\udc81\u200d\u2642\ufe0f What is it about:** To differentiate between the dev and prod env, it\'s common to set a environment variable NODE_ENV with \\"production|test\\" so various tooling and code can act differently. For example, some templating engines will cache compiled templates only in prod. Other example, different configuration and services something troublesome\\n\\n```javascript\\nif(process.env.NODE_ENV === \\"production\\"){\\n    // This is unlikely to be tested since test runner usually set NODE_ENV=test\\n    setLogger({stdout: true, prettyPrint: false});\\n    // If this branch exists, why not add more different configurations:\\n    collectMetrics();\\n}\\nelse{\\n    setLogger({splunk: true, prettyPrint: true});\\n}\\n```\\n\\n**\ud83d\udcca How popular:** 5,034,323 code results in GitHub when searching for \\"NODE_ENV\\". It doesn\'t seem like a rare pattern\\n\\n**\ud83e\udd14 Why it might be wrong:** Anytime your code checks whether it\'s production, this branch can\'t be tested and might fail in production. In this example... Additionally, it opens the door to add more logic and configuration to these branches. Theoretically one can set NODE_ENV = \\"production\\" in testing but then what\'s the point in separating?\\n\\n**\u2600\ufe0f Better alternative:** Conceptually, there is one environment - \\"production\\", developers should strive for *code* that is identical while the surrounding services like log aggregator, collaborator REST API (things that we anyway don\'t test) can differ. In the rare cases where the code behaviour must be different, set a flag per functionality and not per environment - this at least discourages setting more functionality in production or testing if/else branch. See example below:\\n\\n```javascript\\n//package.json\\n\\"scripts\\": {\\n    \\"start\\": \\"LOG_PRETTY_PRINT=false index.js\\",\\n    \\"test\\": \\"LOG_PRETTY_PRINT=true jest\\"\\n}\\n\\n//index.js\\nsetLogger({prettyPrint: process.env.LOG_PRETTY_PRINT})\\n```"}]}')}}]);